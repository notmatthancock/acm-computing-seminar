#+title: Fortran code snippets
#+author: Joseph P. McKenna
#+email: joepatmckenna@gmail.com
#+property: header-args :mkdirp yes :cache yes
#+property: header-args:fortran :exports code
#+property: header-args:sh :exports both
#+startup: latexpreview
#+options: html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="../css/guides.css">
#+html_head: <script src="../js/guides.js"></script>
#+html: <div id="main">
#+html: <a href="../../../" id="home-link">ACM Computing Seminar Home</a>
 
* Hello world
#+begin_src fortran :tangle hello/main.f90
  program main
    print*, 'hello world'
  end program main
#+end_src

#+begin_src sh :dir hello
  gfortran main.f90
#+end_src

#+begin_src sh :dir hello
  ./a.out
#+end_src

* Project template

#+begin_src fortran :tangle template/header.f90
  module header
    implicit none
    ! variable declarations and assignments
  contains
    ! function and subroutine definitions
  end module header
#+end_src

#+begin_src sh :dir template
gfortran -c header.f90
#+end_src

#+begin_src fortran :tangle template/main.f90
  program main
    use header
    implicit none
    ! variable declarations and assignments
    ! function and subroutine calls
  contains
    ! function and subroutine definitions
  end program main
#+end_src

#+begin_src sh :dir template
gfortran main.f90 header.o -o main
#+end_src

#+begin_src sh :dir template
./main
#+end_src

#+begin_src make :exports code :tangle template/makefile
  FC = gfortran
  SRC = main.f90
  EXE = main
  OBJ = header.o

  all: $(EXE)
  $(EXE): $(OBJ)
    $(FC) $(OBJ) $(SRC) -o $(EXE)
  %.o: %.f90
    $(FC) -c $< -o $@
  clean:
    $(RM) *.o $(EXE)
#+end_src

#+begin_src sh :dir template
make
#+end_src

* ${n \choose k}$
#+begin_src fortran :tangle choose/main.f90
  program main
    implicit none
    print*, choose(4,0), choose(4,1), &
         choose(4,2), choose(4,3), choose(4,4)
  contains
    function choose(n,k) result(c)
      integer, intent(in) :: n, k
      integer :: c, i
      c = 1
      do i = 1, min(k,n-k)
         c = c * (n-i+1) / i
      end do
    end function choose
  end program main
#+end_src

#+begin_src sh :dir choose
gfortran main.f90 -o main
#+end_src

#+begin_src sh :dir choose
./main
#+end_src

* Setting precision of variables
#+begin_src fortran :tangle precision/constants.f90
  module constants
    implicit none
    integer, parameter :: sp = kind(0.), dp = kind(0.d0)
    integer, parameter :: rp = dp
  end module constants
#+end_src

#+begin_src sh :dir precision
gfortran -c constants.f90
#+end_src

#+begin_src fortran :tangle precision/main.f90
  program main
    use constants
    implicit none
    real(rp) :: x, y
    x = 1._rp
    y = real(1,rp)
  end program main
#+end_src

#+begin_src sh :dir precision
gfortran main.f90 constants.o -o main
#+end_src

#+begin_src sh :dir precision
./main
#+end_src

#+begin_src make :exports none :tangle precision/makefile
  FC = gfortran
  SRC = main.f90
  EXE = main
  OBJ = constants.o

  all: $(EXE)
  $(EXE): $(OBJ)
    $(FC) $(OBJ) $(SRC) -o $(EXE) 
  %.o: %.f90
    $(FC) -c $< -o $@
  clean:
    $(RM) *.o $(EXE)
#+end_src

* Machine Epsilon
#+begin_src fortran :tangle epsilon/constants.f90
  module constants
    implicit none

    integer, parameter :: sp = kind(0.), dp = kind(0.d0)
    integer, parameter :: rp = dp

    interface machine_epsilon
       module procedure machine_epsilon_sp, machine_epsilon_dp
    end interface machine_epsilon

  contains

    function machine_epsilon_sp(x) result(e)
      implicit none
      real(sp), intent(in) :: x
      real :: e
      e = .5
      do while (1._sp + e > 1._sp)
         e = .5 * e
      end do
    end function machine_epsilon_sp

    function machine_epsilon_dp(x) result(e)
      implicit none
      real(dp), intent(in) :: x
      real :: e
      e = .5
      do while (1._dp + e > 1._dp)
         e = .5 * e
      end do
    end function machine_epsilon_dp

  end module constants
#+end_src

#+begin_src sh :dir epsilon
gfortran -c constants.f90
#+end_src

#+begin_src fortran :tangle epsilon/main.f90
  program main
    use constants
    implicit none
    print*, machine_epsilon(0._sp), machine_epsilon(0._dp)
  end program main
#+end_src

#+begin_src sh :dir epsilon
gfortran main.f90 constants.o -o main
#+end_src
 
#+begin_src sh :dir epsilon
./main
#+end_src

#+begin_src make :exports none :tangle epsilon/makefile
  FC = gfortran
  SRC = main.f90
  EXE = main
  OBJ = constants.o

  all: $(EXE)
  $(EXE): $(OBJ)
    $(FC) $(OBJ) $(SRC) -o $(EXE) 
  %.o: %.f90
    $(FC) -c $< -o $@
  clean:
    $(RM) *.o $(EXE)
#+end_src

#+begin_src fortran :exports both
  print*, epsilon(0.), epsilon(0.d0)
#+end_src

* Rootfinding

#+begin_src fortran :tangle rootfind/functions.f90
  module functions
    implicit none

  contains

    function f1(x)
      real, intent(in) :: x
      real :: f1
      f1 = sin(x)
    end function f1

    function df1dx(x)
      real, intent(in) :: x
      real :: df1dx
      df1dx = cos(x)
    end function df1dx

  end module functions
#+end_src

#+begin_src sh :dir rootfind
gfortran -c functions.f90
#+end_src

#+begin_src fortran :tangle rootfind/rootfind.f90
  module rootfind
    implicit none

    interface
       function fun(x)
         real, intent(in) :: x
         real :: fun
       end function fun
    end interface

  contains

    function newton(f,dfdx,x0,tol,maxstep) result(xn)
      procedure(fun), pointer :: f, dfdx
      real, intent(in) :: x0, tol
      integer, intent(in) :: maxstep
      real :: xn
      integer :: n = 0

      xn = x0
      do while (abs(f(xn))>tol .and. n<maxstep)
         xn = xn - f(xn)/dfdx(xn)
         n = n + 1
      end do
    end function newton

  end module rootfind
#+end_src

#+begin_src sh :dir rootfind
gfortran -c rootfind.f90
#+end_src

#+begin_src fortran :tangle rootfind/main.f90
  program main
  	use functions
    use rootfind
    implicit none

    procedure(fun), pointer :: f, dfdx
    real :: x = 1., tol = 1e-5
    integer :: maxstep = 100
    f => f1
    dfdx => df1dx
    print*, newton(f,dfdx,x,tol,maxstep)

  end program main
#+end_src

#+begin_src sh :dir rootfind
gfortran main.f90 functions.o rootfind.o -o main
#+end_src

#+begin_src make :exports none :tangle rootfind/makefile
  FC = gfortran
  SRC = main.f90
  EXE = main
  OBJ = functions.o rootfind.o

  all: $(EXE)
  $(EXE): $(OBJ)
    $(FC) $(OBJ) $(SRC) -o $(EXE) 
  %.o: %.f90
    $(FC) -c $< -o $@
  clean:
    $(RM) *.o $(EXE)
#+end_src

#+begin_src sh :dir rootfind
./main
#+end_src

* Quadrature

#+begin_src fortran :tangle quadrature/functions.f90
  module functions
    implicit none

  contains

    function f1(x)
      real, intent(in) :: x
      real :: f1
      f1 = x
    end function f1

  end module functions
#+end_src

#+begin_src sh :dir quadrature
  gfortran -c functions.f90
#+end_src

#+begin_src fortran :tangle quadrature/quadrature.f90
  module quadrature
    implicit none

  contains

    function midpoint_rule(f,a,b,n) result(I)
      interface
         function f(x)
           real, intent(in) :: x
           real :: f
         end function f
      end interface
      real :: a, b
      integer :: n, j
      real :: I, dx

      dx = (b-a)/real(n)
      I = 0
      do j = 0,n-1
         I = I + f(a + (j+.5)*dx)
      end do
      I = dx*I
    end function midpoint_rule

  end module quadrature
#+end_src

#+begin_src sh :dir quadrature
  gfortran -c quadrature.f90
#+end_src

#+begin_src fortran :tangle quadrature/main.f90
  program main
    use functions
    use quadrature
    implicit none

    real :: a = 0, b = 1
    integer :: n = 5
    print*, midpoint_rule(f1,a,b,n)

  end program main
#+end_src

#+begin_src sh :dir quadrature
  gfortran main.f90 functions.o quadrature.o -o main
#+end_src

#+begin_src make :exports none :tangle quadrature/makefile
  FC = gfortran
  SRC = main.f90
  EXE = main
  OBJ = functions.o quadrature.o

  all: $(EXE)
  $(EXE): $(OBJ)
    $(FC) $(OBJ) $(SRC) -o $(EXE) 
  %.o: %.f90
    $(FC) -c $< -o $@
  clean:
    $(RM) *.o $(EXE)
#+end_src

#+begin_src sh :dir quadrature
  ./main
#+end_src

* Matrix multiplication
#+begin_src fortran :exports both :tangle matmul/main.f90
  program main
    implicit none

    real :: A(4,4), B(4,4)
    A=1; B=2

    print*, matrix_multiply(A,B)

  contains

    function matrix_multiply(A,B) result(C)
      implicit none
      real :: A(4,4), B(4,4), C(4,4)
      integer :: i,j,k

      C = 0
      do i=1,4
         do j=1,4
            do k=1,4
               C(i,j) = C(i,j) + A(i,k)*B(k,j)
            end do
         end do
      end do

      end function matrix_multiply

  end program main
#+end_src
* $\sum_{n=0}^{\infty}\frac1{n!}$
#+begin_src fortran :exports both :tangle series/main.f90
  program main
    implicit none
    integer :: n = 0, nf = 1
    real :: s = 0
    do while (1./real(nf) > 0)
       s = s + 1./real(nf)
       n = n + 1
       nf = nf * n
    end do
    print*, s, exp(1.)-s
  end program main
#+end_src

#+html: </div>
